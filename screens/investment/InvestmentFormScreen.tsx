import React, { useState, useEffect } from 'react';
import {
    View,
    ScrollView,
    StyleSheet,
    KeyboardAvoidingView,
    Platform,
    Alert,
} from 'react-native';
import {
    TextInput,
    Button,
    Text,
    Card,
    Surface,
    Chip,
    Switch,
    List,
    Divider,
    ProgressBar,
} from 'react-native-paper';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import { useRoute, useNavigation, RouteProp } from '@react-navigation/native';

import { theme, spacing } from '@/constants/theme';
import { useUserStore } from '@/store/userStore';
import { InvestmentRecommendationService } from '@/services/investmentRecommendation';
import { formatCurrency } from '@/utils/formatters';
import { InvestmentType, InvestmentStatus, RiskLevel } from '@/types';

type RouteParams = {
    InvestmentForm: {
        investmentType: InvestmentType;
        investmentName: string;
    };
};

interface InvestmentFormData {
    amount: number;
    monthlyContribution?: number;
    tenure: number;
    autoReinvest: boolean;
    maturityReminder: boolean;
    performanceAlerts: boolean;
    notes?: string;
}

const investmentSchema = yup.object().shape({
    amount: yup
        .number()
        .min(1000, '‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡ßß‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá')
        .max(10000000, '‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡ßß ‡¶ï‡ßã‡¶ü‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ')
        .required('‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï'),
    monthlyContribution: yup
        .number()
        .min(0, '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Ö‡¶¨‡¶¶‡¶æ‡¶® ‡ß¶ ‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá')
        .optional(),
    tenure: yup
        .number()
        .min(1, '‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡ßß ‡¶¨‡¶õ‡¶∞')
        .max(30, '‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡ß©‡ß¶ ‡¶¨‡¶õ‡¶∞')
        .required('‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï'),
    autoReinvest: yup.boolean().default(false),
    maturityReminder: yup.boolean().default(true),
    performanceAlerts: yup.boolean().default(true),
    notes: yup.string().optional(),
});

export const InvestmentFormScreen: React.FC = () => {
    const route = useRoute<RouteProp<RouteParams, 'InvestmentForm'>>();
    const navigation = useNavigation();
    const { user, financialProfile, addInvestment } = useUserStore();
    
    const [currentStep, setCurrentStep] = useState(1);
    const [projection, setProjection] = useState<any>(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    
    const { investmentType, investmentName } = route.params;
    const investmentDetails = InvestmentRecommendationService.getInvestmentDetails(investmentType);
    
    const totalSteps = 3;

    const {
        control,
        handleSubmit,
        watch,
        setValue,
        formState: { errors, isValid },
        trigger,
    } = useForm<InvestmentFormData>({
        resolver: yupResolver(investmentSchema),
        mode: 'onChange',
        defaultValues: {
            amount: investmentDetails?.minInvestment || 1000,
            monthlyContribution: 0,
            tenure: 5,
            autoReinvest: false,
            maturityReminder: true,
            performanceAlerts: true,
            notes: '',
        },
    });

    const watchedValues = watch();

    useEffect(() => {
        if (investmentDetails && financialProfile) {
            // Set suggested amount based on user's capacity
            const availableAmount = financialProfile.monthlyIncome - financialProfile.monthlyExpenses;
            const suggestedAmount = Math.max(
                Math.min(availableAmount * 0.2, 50000),
                investmentDetails.minInvestment
            );
            setValue('amount', suggestedAmount);
            setValue('monthlyContribution', Math.floor(availableAmount * 0.1));
        }
    }, [investmentDetails, financialProfile, setValue]);

    useEffect(() => {
        if (watchedValues.amount > 0 && investmentDetails) {
            calculateProjection();
        }
    }, [watchedValues.amount, watchedValues.monthlyContribution, watchedValues.tenure]);

    const calculateProjection = () => {
        if (!investmentDetails) return;

        const projection = InvestmentRecommendationService.calculateProjection(
            watchedValues.amount,
            investmentDetails.expectedReturn,
            watchedValues.tenure,
            watchedValues.monthlyContribution || 0
        );
        setProjection(projection);
    };

    const onSubmit = async (data: InvestmentFormData) => {
        if (!investmentDetails || !user) {
            Alert.alert('‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø', '‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§');
            return;
        }

        setIsSubmitting(true);

        try {
            // Calculate maturity date
            const maturityDate = new Date();
            maturityDate.setFullYear(maturityDate.getFullYear() + data.tenure);

            const newInvestment = {
                id: `inv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                userId: user.id,
                name: investmentName,
                type: investmentType,
                amount: data.amount,
                currentValue: data.amount,
                expectedReturn: investmentDetails.expectedReturn,
                startDate: new Date(),
                maturityDate,
                status: InvestmentStatus.Active,
                details: {
                    institution: investmentDetails.provider,
                    interestRate: investmentDetails.expectedReturn,
                    monthlyContribution: data.monthlyContribution,
                    autoReinvest: data.autoReinvest,
                },
                performance: {
                    monthlyReturns: [],
                    lastUpdated: new Date(),
                },
                notifications: {
                    maturityReminder: data.maturityReminder,
                    performanceAlerts: data.performanceAlerts,
                },
                notes: data.notes,
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date(),
            };

            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 1500));

            addInvestment(newInvestment);

            Alert.alert(
                '‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶∏‡¶´‡¶≤! üéâ',
                `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${formatCurrency(data.amount)} ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ${investmentName} ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\n‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡¶æ‡¶®‡ßç‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶Ö‡¶∞‡ßç‡¶•: ${formatCurrency(projection?.futureValue || 0)}`,
                [
                    {
                        text: '‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶´‡ßã‡¶≤‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®',
                        onPress: () => {
                            navigation.reset({
                                index: 0,
                                routes: [{ name: 'Main' as never }],
                            });
                            // Navigate to Dashboard tab
                            setTimeout(() => {
                                navigation.navigate('Dashboard' as never);
                            }, 100);
                        },
                    },
                    {
                        text: '‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá',
                        onPress: () => navigation.goBack(),
                    },
                ]
            );
        } catch (error) {
            console.error('Investment submission error:', error);
            Alert.alert(
                '‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',
                '‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
                [{ text: '‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá' }]
            );
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleNext = async () => {
        const fieldsToValidate = getFieldsForStep(currentStep);
        const isStepValid = await trigger(fieldsToValidate);
        
        if (isStepValid) {
            if (currentStep < totalSteps) {
                setCurrentStep(currentStep + 1);
            } else {
                handleSubmit(onSubmit)();
            }
        } else {
            Alert.alert(
                '‡¶´‡¶∞‡ßç‡¶Æ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®',
                '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
                [{ text: '‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá' }]
            );
        }
    };

    const handlePrevious = () => {
        if (currentStep > 1) {
            setCurrentStep(currentStep - 1);
        } else {
            navigation.goBack();
        }
    };

    const getFieldsForStep = (step: number): (keyof InvestmentFormData)[] => {
        switch (step) {
            case 1:
                return ['amount'];
            case 2:
                return ['tenure'];
            case 3:
                return [];
            default:
                return [];
        }
    };

    if (!investmentDetails) {
        return (
            <View style={styles.container}>
                <Card style={styles.errorCard}>
                    <Card.Content>
                        <Text variant="headlineSmall" style={styles.errorTitle}>
                            ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø
                        </Text>
                        <Text variant="bodyMedium" style={styles.errorText}>
                            ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
                        </Text>
                        <Button
                            mode="contained"
                            onPress={() => navigation.goBack()}
                            style={styles.backButton}
                        >
                            ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
                        </Button>
                    </Card.Content>
                </Card>
            </View>
        );
    }

    const renderStep1 = () => (
        <Card style={styles.stepCard}>
            <Card.Content>
                <View style={styles.stepHeader}>
                    <Icon name="currency-bdt" size={40} color={theme.colors.primary} />
                    <Text variant="headlineSmall" style={styles.stepTitle}>
                        ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£
                    </Text>
                    <Text variant="bodyMedium" style={styles.stepDescription}>
                        ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ {investmentName} ‡¶è ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?
                    </Text>
                </View>

                <Controller
                    control={control}
                    name="amount"
                    render={({ field: { onChange, onBlur, value } }) => (
                        <TextInput
                            label="‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ (‡¶ü‡¶æ‡¶ï‡¶æ)"
                            value={value ? value.toString() : ''}
                            onChangeText={(text) => onChange(parseInt(text) || 0)}
                            onBlur={onBlur}
                            error={!!errors.amount}
                            keyboardType="numeric"
                            left={<TextInput.Icon icon="currency-bdt" />}
                            style={styles.input}
                        />
                    )}
                />
                {errors.amount && (
                    <Text variant="bodySmall" style={styles.errorText}>
                        {errors.amount.message}
                    </Text>
                )}

                <Surface style={styles.infoCard}>
                    <Text variant="bodyMedium" style={styles.infoText}>
                        üí° ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó: {formatCurrency(investmentDetails.minInvestment)}
                    </Text>
                    <Text variant="bodySmall" style={styles.infoSubtext}>
                        ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®: {investmentDetails.expectedReturn}%
                    </Text>
                </Surface>

                {financialProfile && (
                    <Surface style={styles.suggestionCard}>
                        <Text variant="titleMedium" style={styles.suggestionTitle}>
                            üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂
                        </Text>
                        <Text variant="bodyMedium" style={styles.suggestionText}>
                            ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ: {formatCurrency(financialProfile.monthlyIncome - financialProfile.monthlyExpenses)}
                        </Text>
                        <Text variant="bodySmall" style={styles.suggestionSubtext}>
                            ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂‡¶ï‡ßÉ‡¶§ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó: {formatCurrency(Math.min((financialProfile.monthlyIncome - financialProfile.monthlyExpenses) * 0.3, 50000))}
                        </Text>
                    </Surface>
                )}
            </Card.Content>
        </Card>
    );

    const renderStep2 = () => (
        <Card style={styles.stepCard}>
            <Card.Content>
                <View style={styles.stepHeader}>
                    <Icon name="calendar-clock" size={40} color={theme.colors.secondary} />
                    <Text variant="headlineSmall" style={styles.stepTitle}>
                        ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶
                    </Text>
                    <Text variant="bodyMedium" style={styles.stepDescription}>
                        ‡¶ï‡¶§ ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?
                    </Text>
                </View>

                <Controller
                    control={control}
                    name="tenure"
                    render={({ field: { onChange, onBlur, value } }) => (
                        <TextInput
                            label="‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ (‡¶¨‡¶õ‡¶∞)"
                            value={value ? value.toString() : ''}
                            onChangeText={(text) => onChange(parseInt(text) || 0)}
                            onBlur={onBlur}
                            error={!!errors.tenure}
                            keyboardType="numeric"
                            left={<TextInput.Icon icon="calendar-clock" />}
                            style={styles.input}
                        />
                    )}
                />
                {errors.tenure && (
                    <Text variant="bodySmall" style={styles.errorText}>
                        {errors.tenure.message}
                    </Text>
                )}

                <Controller
                    control={control}
                    name="monthlyContribution"
                    render={({ field: { onChange, onBlur, value } }) => (
                        <TextInput
                            label="‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)"
                            value={value ? value.toString() : ''}
                            onChangeText={(text) => onChange(parseInt(text) || 0)}
                            onBlur={onBlur}
                            keyboardType="numeric"
                            left={<TextInput.Icon icon="calendar-month" />}
                            style={styles.input}
                        />
                    )}
                />

                {projection && (
                    <Surface style={styles.projectionCard}>
                        <Text variant="titleMedium" style={styles.projectionTitle}>
                            üìä ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡¶∂‡¶®
                        </Text>
                        
                        <View style={styles.projectionGrid}>
                            <View style={styles.projectionItem}>
                                <Text variant="headlineSmall" style={styles.projectionValue}>
                                    {formatCurrency(projection.futureValue)}
                                </Text>
                                <Text variant="bodySmall" style={styles.projectionLabel}>
                                    ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡¶æ‡¶®‡ßç‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶Ö‡¶∞‡ßç‡¶•
                                </Text>
                            </View>

                            <View style={styles.projectionItem}>
                                <Text variant="headlineSmall" style={[styles.projectionValue, { color: '#4CAF50' }]}>
                                    {formatCurrency(projection.totalReturn)}
                                </Text>
                                <Text variant="bodySmall" style={styles.projectionLabel}>
                                    ‡¶Æ‡ßã‡¶ü ‡¶≤‡¶æ‡¶≠
                                </Text>
                            </View>
                        </View>

                        <Divider style={styles.divider} />

                        <View style={styles.projectionDetails}>
                            <Text variant="bodyMedium" style={styles.projectionDetailText}>
                                ‚Ä¢ ‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó: {formatCurrency(projection.totalInvestment)}
                            </Text>
                            <Text variant="bodyMedium" style={styles.projectionDetailText}>
                                ‚Ä¢ ‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®: {investmentDetails.expectedReturn}%
                            </Text>
                            <Text variant="bodyMedium" style={styles.projectionDetailText}>
                                ‚Ä¢ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶: {watchedValues.tenure} ‡¶¨‡¶õ‡¶∞
                            </Text>
                        </View>
                    </Surface>
                )}
            </Card.Content>
        </Card>
    );

    const renderStep3 = () => (
        <Card style={styles.stepCard}>
            <Card.Content>
                <View style={styles.stepHeader}>
                    <Icon name="cog" size={40} color={theme.colors.tertiary} />
                    <Text variant="headlineSmall" style={styles.stepTitle}>
                        ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏
                    </Text>
                    <Text variant="bodyMedium" style={styles.stepDescription}>
                        ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                    </Text>
                </View>

                <View style={styles.settingsContainer}>
                    <Controller
                        control={control}
                        name="autoReinvest"
                        render={({ field: { onChange, value } }) => (
                            <List.Item
                                title="‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶™‡ßÅ‡¶®‡¶É‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó"
                                description="‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡¶æ‡¶®‡ßç‡¶§‡ßá ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"
                                left={(props) => <List.Icon {...props} icon="autorenew" />}
                                right={() => (
                                    <Switch
                                        value={value}
                                        onValueChange={onChange}
                                    />
                                )}
                            />
                        )}
                    />

                    <Divider />

                    <Controller
                        control={control}
                        name="maturityReminder"
                        render={({ field: { onChange, value } }) => (
                            <List.Item
                                title="‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡¶æ‡¶®‡ßç‡¶§‡ßá‡¶∞ ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞"
                                description="‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶®"
                                left={(props) => <List.Icon {...props} icon="bell-ring" />}
                                right={() => (
                                    <Switch
                                        value={value}
                                        onValueChange={onChange}
                                    />
                                )}
                            />
                        )}
                    />

                    <Divider />

                    <Controller
                        control={control}
                        name="performanceAlerts"
                        render={({ field: { onChange, value } }) => (
                            <List.Item
                                title="‡¶™‡¶æ‡¶∞‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü"
                                description="‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶™‡¶æ‡¶∞‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶™‡¶æ‡¶®"
                                left={(props) => <List.Icon {...props} icon="chart-line" />}
                                right={() => (
                                    <Switch
                                        value={value}
                                        onValueChange={onChange}
                                    />
                                )}
                            />
                        )}
                    />
                </View>

                <Controller
                    control={control}
                    name="notes"
                    render={({ field: { onChange, onBlur, value } }) => (
                        <TextInput
                            label="‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡ßã‡¶ü (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)"
                            value={value || ''}
                            onChangeText={onChange}
                            onBlur={onBlur}
                            multiline
                            numberOfLines={3}
                            placeholder="‡¶è‡¶á ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶®‡ßã‡¶ü..."
                            left={<TextInput.Icon icon="note-text" />}
                            style={styles.notesInput}
                        />
                    )}
                />
            </Card.Content>
        </Card>
    );

    const renderCurrentStep = () => {
        switch (currentStep) {
            case 1:
                return renderStep1();
            case 2:
                return renderStep2();
            case 3:
                return renderStep3();
            default:
                return renderStep1();
        }
    };

    return (
        <KeyboardAvoidingView
            style={styles.container}
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
            
            {/* Header */}
            <Surface style={styles.header} elevation={2}>
                <View style={styles.headerContent}>
                    <View style={styles.headerLeft}>
                        <Icon name="plus-circle" size={32} color={theme.colors.primary} />
                        <View style={styles.headerText}>
                            <Text variant="titleLarge" style={styles.headerTitle}>
                                {investmentName}
                            </Text>
                            <Text variant="bodyMedium" style={styles.headerSubtitle}>
                                ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó
                            </Text>
                        </View>
                    </View>
                    
                    <Chip style={styles.riskChip}>
                        {investmentDetails.riskLevel === RiskLevel.Low ? '‡¶ï‡¶Æ ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø' : 
                         investmentDetails.riskLevel === RiskLevel.Medium ? '‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø' : '‡¶â‡¶ö‡ßç‡¶ö ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø'}
                    </Chip>
                </View>
            </Surface>

            <ScrollView
                contentContainerStyle={styles.scrollContent}
                showsVerticalScrollIndicator={false}>

                {/* Progress Header */}
                <Surface style={styles.progressHeader} elevation={1}>
                    <Text variant="titleMedium" style={styles.progressTitle}>
                        ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ
                    </Text>
                    <Text variant="bodyMedium" style={styles.progressSubtitle}>
                        ‡¶ß‡¶æ‡¶™ {currentStep} / {totalSteps}
                    </Text>
                    <ProgressBar
                        progress={currentStep / totalSteps}
                        color={theme.colors.primary}
                        style={styles.progressBar}
                    />
                </Surface>

                {/* Current Step */}
                {renderCurrentStep()}

                {/* Investment Summary */}
                {currentStep === totalSteps && projection && (
                    <Card style={styles.summaryCard}>
                        <Card.Content>
                            <Text variant="titleLarge" style={styles.summaryTitle}>
                                üìã ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™
                            </Text>

                            <View style={styles.summaryGrid}>
                                <View style={styles.summaryItem}>
                                    <Text variant="bodySmall" style={styles.summaryLabel}>‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®</Text>
                                    <Text variant="titleMedium" style={styles.summaryValue}>{investmentName}</Text>
                                </View>

                                <View style={styles.summaryItem}>
                                    <Text variant="bodySmall" style={styles.summaryLabel}>‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó</Text>
                                    <Text variant="titleMedium" style={styles.summaryValue}>
                                        {formatCurrency(watchedValues.amount)}
                                    </Text>
                                </View>

                                <View style={styles.summaryItem}>
                                    <Text variant="bodySmall" style={styles.summaryLabel}>‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶</Text>
                                    <Text variant="titleMedium" style={styles.summaryValue}>
                                        {watchedValues.tenure} ‡¶¨‡¶õ‡¶∞
                                    </Text>
                                </View>

                                <View style={styles.summaryItem}>
                                    <Text variant="bodySmall" style={styles.summaryLabel}>‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡¶æ‡¶®‡ßç‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§</Text>
                                    <Text variant="titleMedium" style={[styles.summaryValue, { color: '#4CAF50' }]}>
                                        {formatCurrency(projection.futureValue)}
                                    </Text>
                                </View>
                            </View>
                        </Card.Content>
                    </Card>
                )}
            </ScrollView>

            {/* Navigation Buttons */}
            <Surface style={styles.navigationContainer} elevation={3}>
                <View style={styles.navigationButtons}>
                    <Button
                        mode="outlined"
                        onPress={handlePrevious}
                        style={styles.previousButton}
                        icon={currentStep === 1 ? "arrow-left" : "arrow-left"}>
                        {currentStep === 1 ? '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤' : '‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ'}
                    </Button>

                    <Button
                        mode="contained"
                        onPress={handleNext}
                        loading={isSubmitting}
                        disabled={isSubmitting}
                        style={styles.nextButton}
                        icon={currentStep === totalSteps ? "check" : "arrow-right"}>
                        {currentStep === totalSteps ? '‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®' : '‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ'}
                    </Button>
                </View>
            </Surface>
        </KeyboardAvoidingView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: theme.colors.background,
    },
    header: {
        backgroundColor: theme.colors.surface,
    },
    headerContent: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: spacing.md,
    },
    headerLeft: {
        flexDirection: 'row',
        alignItems: 'center',
        flex: 1,
    },
    headerText: {
        marginLeft: spacing.sm,
        flex: 1,
    },
    headerTitle: {
        fontWeight: 'bold',
        color: theme.colors.onSurface,
    },
    headerSubtitle: {
        color: theme.colors.onSurfaceVariant,
    },
    riskChip: {
        backgroundColor: theme.colors.primaryContainer,
    },
    scrollContent: {
        flexGrow: 1,
        padding: spacing.md,
    },
    progressHeader: {
        padding: spacing.md,
        marginBottom: spacing.lg,
        borderRadius: theme.roundness,
        backgroundColor: theme.colors.surface,
    },
    progressTitle: {
        textAlign: 'center',
        fontWeight: 'bold',
        color: theme.colors.onSurface,
    },
    progressSubtitle: {
        textAlign: 'center',
        color: theme.colors.onSurfaceVariant,
        marginTop: spacing.xs,
        marginBottom: spacing.md,
    },
    progressBar: {
        height: 6,
        borderRadius: 3,
    },
    stepCard: {
        marginBottom: spacing.lg,
    },
    stepHeader: {
        alignItems: 'center',
        marginBottom: spacing.lg,
    },
    stepTitle: {
        fontWeight: 'bold',
        color: theme.colors.onSurface,
        marginTop: spacing.md,
        marginBottom: spacing.sm,
        textAlign: 'center',
    },
    stepDescription: {
        textAlign: 'center',
        color: theme.colors.onSurfaceVariant,
        paddingHorizontal: spacing.md,
    },
    input: {
        marginBottom: spacing.md,
        backgroundColor: theme.colors.surface,
    },
    notesInput: {
        marginTop: spacing.md,
        backgroundColor: theme.colors.surface,
    },
    errorText: {
        color: theme.colors.error,
        marginBottom: spacing.sm,
        marginLeft: spacing.sm,
    },
    infoCard: {
        padding: spacing.md,
        marginTop: spacing.md,
        borderRadius: theme.roundness,
        backgroundColor: theme.colors.primaryContainer,
    },
    infoText: {
        color: theme.colors.onPrimaryContainer,
        fontWeight: 'bold',
    },
    infoSubtext: {
        color: theme.colors.onPrimaryContainer,
        opacity: 0.8,
        marginTop: spacing.xs,
    },
    suggestionCard: {
        padding: spacing.md,
        marginTop: spacing.md,
        borderRadius: theme.roundness,
        backgroundColor: theme.colors.tertiaryContainer,
    },
    suggestionTitle: {
        color: theme.colors.onTertiaryContainer,
        fontWeight: 'bold',
        marginBottom: spacing.sm,
    },
    suggestionText: {
        color: theme.colors.onTertiaryContainer,
    },
    suggestionSubtext: {
        color: theme.colors.onTertiaryContainer,
        opacity: 0.8,
        marginTop: spacing.xs,
    },
    projectionCard: {
        padding: spacing.lg,
        marginTop: spacing.lg,
        borderRadius: theme.roundness,
        backgroundColor: theme.colors.secondaryContainer,
    },
    projectionTitle: {
        fontWeight: 'bold',
        color: theme.colors.onSecondaryContainer,
        textAlign: 'center',
        marginBottom: spacing.md,
    },
    projectionGrid: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        marginBottom: spacing.md,
    },
    projectionItem: {
        alignItems: 'center',
    },
    projectionValue: {
        fontWeight: 'bold',
        color: theme.colors.primary,
    },
    projectionLabel: {
        color: theme.colors.onSecondaryContainer,
        marginTop: spacing.xs,
        textAlign: 'center',
    },
    projectionDetails: {
        marginTop: spacing.md,
    },
    projectionDetailText: {
        color: theme.colors.onSecondaryContainer,
        marginBottom: spacing.xs,
    },
    divider: {
        marginVertical: spacing.md,
    },
    settingsContainer: {
        marginBottom: spacing.lg,
    },
    summaryCard: {
        backgroundColor: theme.colors.primaryContainer,
    },
    summaryTitle: {
        fontWeight: 'bold',
        color: theme.colors.onPrimaryContainer,
        textAlign: 'center',
        marginBottom: spacing.lg,
    },
    summaryGrid: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'space-between',
    },
    summaryItem: {
        width: '48%',
        marginBottom: spacing.md,
        alignItems: 'center',
    },
    summaryLabel: {
        color: theme.colors.onPrimaryContainer,
        opacity: 0.8,
    },
    summaryValue: {
        color: theme.colors.onPrimaryContainer,
        fontWeight: 'bold',
        marginTop: spacing.xs,
        textAlign: 'center',
    },
    navigationContainer: {
        backgroundColor: theme.colors.surface,
        paddingHorizontal: spacing.md,
        paddingVertical: spacing.lg,
    },
    navigationButtons: {
        flexDirection: 'row',
        justifyContent: 'space-between',
    },
    previousButton: {
        flex: 1,
        marginRight: spacing.sm,
    },
    nextButton: {
        flex: 1,
        marginLeft: spacing.sm,
    },
    errorCard: {
        margin: spacing.lg,
    },
    errorTitle: {
        fontWeight: 'bold',
        color: theme.colors.error,
        textAlign: 'center',
        marginBottom: spacing.md,
    },
    errorText: {
        color: theme.colors.onSurfaceVariant,
        textAlign: 'center',
        marginBottom: spacing.lg,
    },
    backButton: {
        marginTop: spacing.md,
    },
});